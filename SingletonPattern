package com.demo.designpattern;

import java.util.HashMap;
import java.util.Map;

/**
 * 单例设计模式
 * @author yinbenyang
 * 单例模式分三种：懒汉式单例、饿汉式单例、登记式单例
 */
public class SingletonPattern {

	/**
	 * 懒汉式单例
	 * 懒汉式单例在类被加载的时候，唯一实例已经被创建
	 */
	//私有静态对象,加载时候不做初始化
	private static SingletonPattern m_instance = null;
	//私有构造方法,避免外部创建实例
	private SingletonPattern(){}	
	//静态工厂方法,返回此类的唯一实例.* 当发现实例没有初始化的时候,才初始化
	public static SingletonPattern getInstance(){
		if(m_instance == null){
			m_instance = new SingletonPattern();
		}
		return m_instance;
	}
	
	public static void main(String[] args) {
		SingletonPattern sp1 = SingletonPattern.getInstance();
		SingletonPattern sp2 = SingletonPattern.getInstance();
		if(sp1 == sp2){
			System.out.println("同一个实例");
		}else{
			System.out.println("不同的实例");
		}
	}
}


/**
 * 饿汉式单例
 * 饿汉式单例在类加载的时候不创建单例实例。只有在第一次请求实例的时候的时候创建，并且只在第一次创建后，以后不再创建该类的实例
 */
class EagerSingleton{
	//私有的(private)唯一(static final)实例成员,在类加载的时候就创建好了单例对象
	private static final EagerSingleton m_instance = new EagerSingleton();
	//私有构造方法,避免外部创建实例
	private EagerSingleton(){}
	//静态工厂方法,返回此类的唯一实例
	public static EagerSingleton getInstance(){
		return m_instance;
	}
	
	public static void main(String[] args) {
		EagerSingleton sp1 = EagerSingleton.getInstance();
		EagerSingleton sp2 = EagerSingleton.getInstance();
		if(sp1 == sp2){
			System.out.println("同一个实例2");
		}else{
			System.out.println("不同的实例2");
		}
	}
}

/*
 * 登记式单例
 * 登记式单例这个单例实际上维护的是一组单例类的实例，将这些实例存放在一个Map（登记薄）中，
 * 对于已经登记过的实例，则从工厂直接返回，对于没有登记的，则先登记，而后返回
 */
class RegSingleton{
	//登记薄,用来存放所有登记的实例 
	private static Map<String, RegSingleton> map_reg = new HashMap<String, RegSingleton>();
	//在类加载的时候添加一个实例到登记薄
	static{
		RegSingleton rp = new RegSingleton();
		map_reg.put(rp.getClass().getName(), rp);
	}
	//受保护的默认构造方法
	protected RegSingleton(){}
	//静态工厂方法,返回指定登记对象的唯一实例
	//对于已登记的直接取出返回,对于还未登记的,先登记,然后取出返回
	public static RegSingleton getInstance(String name){
		if(name == null){
			name = "RegSingleton";
		}
		if(map_reg.get(name) == null){
			try {
				map_reg.put(name, (RegSingleton)Class.forName(name).newInstance());
			} catch (InstantiationException | IllegalAccessException
					| ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		return map_reg.get(name);
	}
	
	private String about(){
		return new String("aaaaaaaaaaaaa");
	}
	
	public static void main(String[] args) {
		RegSingleton sp1 = RegSingleton.getInstance(null);
		RegSingleton sp2 = RegSingleton.getInstance(null);
		if(sp1 == sp2){
			System.out.println("同一个实例3");
		}else{
			System.out.println("不同的实例3");
		}
	}
}
